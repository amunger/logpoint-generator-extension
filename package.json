{
  "name": "logpoint-generator",
  "displayName": "logpoint generator",
  "publisher": "amunger",
  "description": "",
  "version": "0.0.1",
  "icon": "assets/icon.png",
  "engines": {
    "vscode": "^1.99.0"
  },
  "categories": [
    "Other"
  ],
  "activationEvents": [],
  "main": "./out/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "logpoint-generator.generateLogpoint",
        "title": "Generate Logpoint"
      }
    ],
    "keybindings": [
      {
        "command": "logpoint-generator.generateLogpoint",
        "key": "shift+alt+f9",
        "when": "editorTextFocus"
      }
    ],
    "menus": {
      "commandPalette": [
        {
          "command": "logpoint-generator.generateLogpoint",
          "when": "editorTextFocus"
        }
      ],
      "editor/lineNumber/context": [
        {
          "command": "logpoint-generator.generateLogpoint",
          "group": "1_logpoint_generator"
        }
      ]
    },
    "languageModelTools": [
      {
        "name": "logpoint_generator_add_logpoint",
        "displayName": "Add Log Point",
        "modelDescription": "Create a debugger log point that will print a log to the debug panel with the provided message when the debugger reaches that point. The message can be interpolated with variables from the debugger by surrounding with {}.",
        "toolReferenceName": "addLogPoint",
        "tags": [
          "debugging"
        ],
        "icon": "$(debug-breakpoint-log)",
        "canBeReferencedInPrompt": true,
        "inputSchema": {
          "type": "object",
          "properties": {
            "filePath": {
              "description": "The absolute path of the file to read.",
              "type": "string"
            },
            "lineNumber": {
              "description": "The 1-based line number on which to add the log point. The line should contain executable code and needs to be after any variable referenced in the log message",
              "type": "number"
            },
            "columnNumber": {
              "description": "The column number on which to add the log point for an inline breakpoint.",
              "type": "number"
            },
            "logMessage": {
              "type": "string",
              "description": "The message that will print in the debug panel. Debugger variables can be interpolated by surrounding the variable name with {}. The variables need to have already been assigned and exist in scope as the code on the target line."
            }
          },
          "required": [
            "filePath",
            "lineNumber",
            "logMessage"
          ]
        }
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "pretest": "npm run compile && npm run lint",
    "lint": "eslint src",
    "test": "vscode-test"
  },
  "devDependencies": {
    "@types/mocha": "^10.0.10",
    "@types/node": "20.x",
    "@types/vscode": "^1.99.0",
    "@typescript-eslint/eslint-plugin": "^8.28.0",
    "@typescript-eslint/parser": "^8.28.0",
    "@vscode/test-cli": "^0.0.10",
    "@vscode/test-electron": "^2.4.1",
    "eslint": "^9.23.0",
    "typescript": "^5.8.2"
  },
  "dependencies": {
    "@vscode/prompt-tsx": "^0.3.0-alpha.24"
  }
}
